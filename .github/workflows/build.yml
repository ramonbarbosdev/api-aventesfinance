# -------------------------------------------------------------
# GitHub Actions – Maven Build & FTP Deploy
# -------------------------------------------------------------
# • Compila o projeto Spring Boot (JDK 20) com Maven (skip tests)
# • Renomeia o artefato JAR para "app-avantes.jar"
# • Faz upload via FTP para o cPanel
# • Reinicia a aplicação remotamente via SSH (Expect)
# -------------------------------------------------------------

name: Maven Build & FTP Deploy

on:
  push:
    branches:
      - main          # Executa apenas quando houver push na branch main

# Variáveis reutilizadas em vários passos (evita repetição)
env:
  JAR_FINAL_NAME: app-avantes.jar      # Nome final do JAR no servidor
  REMOTE_DEPLOY_DIR: ~/appservers/standalone   # Pasta de destino no host

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout do código‑fonte
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) Configura JDK 20 (Temurin)
      - name: Set up JDK 20
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '20'

      # 3) Build Maven (sem rodar testes)
      - name: Build with Maven (skip tests)
        run: mvn -B clean package -DskipTests

      # 4) Copia e renomeia o JAR gerado para pasta de upload
      - name: Prepare JAR for upload
        run: |
          mkdir -p jar-upload
          ORIGINAL_JAR=$(ls target/*.jar | head -n 1)
          echo "Original JAR encontrado: $ORIGINAL_JAR"
          cp "$ORIGINAL_JAR" "jar-upload/${{ env.JAR_FINAL_NAME }}"

      # 5) Upload via FTP (Sam Kirkland)
      - name: Deploy via FTP
        uses: SamKirkland/FTP-Deploy-Action@4.0.0
        with:
          server: ${{ secrets.HOST }}           # "ftp.seudominio.com" (sem http://)
          username: ${{ secrets.USUARIOCPANEL }}
          password: ${{ secrets.SENHACPANEL }}
          local-dir: ./jar-upload               # Diretório local com app-avantes.jar
          server-dir: ${{ env.REMOTE_DEPLOY_DIR }}
          # dangerous-clean-slate: true         # (opcional) limpa o dir remoto antes

      # 6) Instala utilitários SSH (sshpass + expect)
      - name: Install SSH utilities
        run: sudo apt-get update && sudo apt-get install -y openssh-client sshpass expect

      # 7) Reinicia a aplicação remotamente
      - name: Restart remote application
        env:
          SSH_USER: ${{ secrets.USUARIOCPANEL }}
          HOST: ${{ secrets.HOST }}
          SSH_PASS: ${{ secrets.SENHACPANEL }}
          REMOTE_DEPLOY_DIR: ${{ env.REMOTE_DEPLOY_DIR }}
          JAR_FINAL_NAME: ${{ env.JAR_FINAL_NAME }}
        run: |
          expect -c "
          set timeout 60
          spawn ssh -o StrictHostKeyChecking=no $env(SSH_USER)@$env(HOST)
          expect \"password:\"
          send \"$env(SSH_PASS)\r\"
          expect \"$ \"
          # --- Para processo existente (caso haja) ---
          send \"pkill -f $env(JAR_FINAL_NAME)\r\"
          expect \"$ \"
          # --- Inicia nova instância em segundo plano ---
          send \"nohup java -jar $env(REMOTE_DEPLOY_DIR)/$env(JAR_FINAL_NAME) > $env(REMOTE_DEPLOY_DIR)/app-avantes.out 2>&1 &\r\"
          expect \"$ \"
          send \"exit\r\"
          expect eof
          "
